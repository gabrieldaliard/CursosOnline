// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ClassLibrary1
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Curso> Cursoes { get; set; } // Cursos
        public DbSet<Estado> Estadoes { get; set; } // Estados
        public DbSet<InfoAcademia> InfoAcademias { get; set; } // InfoAcademia
        public DbSet<Instructore> Instructores { get; set; } // Instructores
        public DbSet<Pais> Pais { get; set; } // Paises
        public DbSet<PreguntasFreq> PreguntasFreqs { get; set; } // PreguntasFreq
        public DbSet<Usuario> Usuarios { get; set; } // Usuarios
        public DbSet<UsuariosCurso> UsuariosCursoes { get; set; } // UsuariosCursos

        public FakeMyDbContext()
        {
            _database = null;

            Cursoes = new FakeDbSet<Curso>("IdCurso");
            Estadoes = new FakeDbSet<Estado>("IdEstado");
            InfoAcademias = new FakeDbSet<InfoAcademia>("IdAcademia");
            Instructores = new FakeDbSet<Instructore>("IdInstructor");
            Pais = new FakeDbSet<Pais>("IdPais");
            PreguntasFreqs = new FakeDbSet<PreguntasFreq>("IdPregunta");
            Usuarios = new FakeDbSet<Usuario>("IdUsuario");
            UsuariosCursoes = new FakeDbSet<UsuariosCurso>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }
}
// </auto-generated>
